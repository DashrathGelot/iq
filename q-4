// Java program to find count of substring
// containing exactly K ones
import java.io.*;

public class GFG {

    // method returns total number of
    // substring having K ones
    
    static long countOfSubstringWithKOnes(String s, int K)
    {
        int N = s.length();
        int res = 0;
        int countOfOne = 0;
        int []freq = new int[N+1];
    
        // initialize index having zero
        // sum as 1
        freq[0] = 1;
    
        // loop over binary characters
        // of string
        int firstIndex = 0;
        long min = 0;
        for (int i = 0; i < N; i++) {
    
            // update countOfOne variable
            // with value of ith character
            countOfOne += (s.charAt(i) - '0');
    
            // if value reaches more than
            // K, then update result
            if (countOfOne >= K) {
                if (s.substring(firstIndex, i) != "") {
                    long decimal = Long.parseLong(s.substring(firstIndex, i), 2);  
                    if (min > decimal) {
                        min = decimal;
                    }
                }
                // add frequency of indices,
                // having sum (current sum - K),
                // to the result
                res += freq[countOfOne - K];
            }
    
            // update frequency of one's count
            freq[countOfOne]++;
        }
        
        return min;
    }
    
    // Driver code to test above methods
    static public void main (String[] args)
    {
        String s = "100101";
        int K = 3;
        
        System.out.println(
            countOfSubstringWithKOnes(s, K));
    }
}
